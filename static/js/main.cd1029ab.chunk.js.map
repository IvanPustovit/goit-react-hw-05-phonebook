{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","utils/storage.js","App.js","index.js"],"names":["module","exports","ContactForm","handleChangeName","nameValue","numberValue","handleChangeNumber","addToContacts","contactsId","className","classes","form","htmlFor","name","id","type","value","onChange","onClick","Filter","handleChangeNameFilter","contacts","TransitionGroup","length","CSSTransition","timeout","classNames","mountOnEnter","unmountOnExit","ContactList","filterContacts","deleteContact","component","map","el","key","number","localStorage","setItem","JSON","stringify","err","Error","items","getItem","parse","App","state","filter","notifyA","toast","notifyB","e","preventDefault","newContacts","shortid","generate","find","contact","setState","prev","inputHandlerContact","target","getFilterContacts","toLocaleLowerCase","includes","ContactListNew","isContact","some","contactsData","storage","this","prevState","filteredContacts","in","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd1029ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3bwAX\",\"label-name\":\"ContactForm_label-name__1Lhv1\"};","import React from \"react\";\r\nimport classes from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst ContactForm = ({\r\n  handleChangeName,\r\n  nameValue,\r\n  numberValue,\r\n  handleChangeNumber,\r\n  addToContacts,\r\n  contactsId,\r\n}) => {\r\n  return (\r\n    <div className={classes.form}>\r\n      <form>\r\n        <label className={classes[\"label-name\"]} htmlFor={contactsId}>\r\n          Name\r\n          <input\r\n            name=\"name\"\r\n            id={contactsId}\r\n            type=\"text\"\r\n            value={nameValue}\r\n            onChange={handleChangeName}\r\n          />\r\n        </label>\r\n\r\n        <label className={classes[\"label-name\"]}>\r\n          Number\r\n          <input\r\n            name=\"number\"\r\n            type=\"text\"\r\n            value={numberValue}\r\n            onChange={handleChangeNumber}\r\n          />\r\n        </label>\r\n\r\n        <div>\r\n          <button type=\"text\" onClick={addToContacts}>\r\n            Add contact\r\n          </button>\r\n          <ToastContainer />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nContactForm.propTypes = {\r\n  handleChangeName: PropTypes.func.isRequired,\r\n  handleChangeNumber: PropTypes.func.isRequired,\r\n  nameValue: PropTypes.string.isRequired,\r\n  numberValue: PropTypes.string.isRequired,\r\n  addToContacts: PropTypes.func.isRequired,\r\n  contactsId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ handleChangeNameFilter, contacts }) => {\r\n  return (\r\n    <TransitionGroup>\r\n      {contacts.length > 1 && (\r\n        <CSSTransition\r\n          timeout={250}\r\n          classNames=\"filter\"\r\n          mountOnEnter\r\n          unmountOnExit\r\n        >\r\n          <div className=\"filter\">\r\n            <p>Find contacts by name</p>\r\n            <input\r\n              name=\"filter\"\r\n              type=\"text\"\r\n              onChange={handleChangeNameFilter}\r\n            />\r\n          </div>\r\n        </CSSTransition>\r\n      )}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleChangeNameFilter: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import classes from \"./ContactList.module.css\";\r\nimport \"./ContactList.css\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nconst ContactList = ({ contacts, filterContacts, deleteContact }) => {\r\n  return (\r\n    <div>\r\n      <TransitionGroup component=\"ul\">\r\n        {filterContacts.length\r\n          ? filterContacts.map((el) => (\r\n              <CSSTransition\r\n                key={el.name}\r\n                classNames=\"list-item\"\r\n                timeout={250}\r\n                mountOnEnter\r\n                unmountOnExit\r\n              >\r\n                <li className=\"list-item\">\r\n                  <p>{el.name}</p>\r\n                  <p>{el.number}</p>\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    id={el.id}\r\n                    className=\"delete\"\r\n                    onClick={() => {\r\n                      deleteContact(el.id);\r\n                    }}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </li>\r\n              </CSSTransition>\r\n            ))\r\n          : contacts.map((el) => (\r\n              <CSSTransition\r\n                key={el.name}\r\n                classNames=\"list-item\"\r\n                timeout={250}\r\n                mountOnEnter\r\n                unmountOnExit\r\n              >\r\n                <li className=\"list-item\">\r\n                  <p>{el.name}</p>\r\n                  <p>{el.number}</p>\r\n                  <button\r\n                    type=\"button\"\r\n                    id={el.id}\r\n                    className=\"delete\"\r\n                    onClick={() => {\r\n                      deleteContact(el.id);\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </li>\r\n              </CSSTransition>\r\n            ))}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  filterContacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","const save = (key, value) => {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (err) {\n      throw new Error();\n    }\n  };\n  const get = key => {\n    try {\n      const items = localStorage.getItem(key);\n      return items ? JSON.parse(items) : null;\n    } catch (err) {\n      throw new Error();\n    }\n  };\n  export default {\n    save,\n    get,\n  }","import React, { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport shortid from \"shortid\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport storage from \"./utils/storage\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n  };\n  notifyA = () => toast(\"Enter name and number\");\n  notifyB = () => {\n    const { name } = this.state;\n    toast(`${name} is already in contacts`);\n  };\n\n  addToContacts = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const newContacts = { name: name, number: number, id: shortid.generate() };\n\n    if (\n      this.state.contacts.find((contact) => contact.name === this.state.name)\n    ) {\n      this.notifyB();\n    } else {\n      this.setState((prev) => ({ contacts: [...prev.contacts, newContacts] }));\n    }\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  inputHandlerContact = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  getFilterContacts = (filter, contacts) =>\n    contacts.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\n    );\n\n  deleteContact = (id) => {\n    const { contacts } = this.state;\n    const ContactListNew = contacts.filter((el) => el.id !== id);\n\n    this.setState({\n      contacts: ContactListNew,\n    });\n  };\n\n  isContact = (e) => {\n    const { name, contacts } = this.state;\n    return contacts.some(\n      (el) => el.name.toLocaleLowerCase() === name.toLocaleLowerCase(),\n    );\n  };\n\n  componentDidMount() {\n    const contactsData = storage.get(\"contacts\");\n    if (contactsData) {\n      this.setState({\n        contacts: contactsData,\n      });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      storage.save(\"contacts\", this.state.contacts);\n    }\n  }\n\n  contactsId = shortid.generate();\n  render() {\n    const { name, number, contacts, filter } = this.state;\n    const filteredContacts = this.getFilterContacts(\n      this.state.filter,\n      this.state.contacts,\n    );\n\n    return (\n      <div>\n        <CSSTransition\n          in={true}\n          classNames=\"phonebook\"\n          timeout={500}\n          mountOnEnter\n          unmountOnExit\n        >\n          <div className=\"phonebook\">\n            <h1>Phonebook</h1>\n          </div>\n        </CSSTransition>\n\n        <ContactForm\n          handleChangeName={this.inputHandlerContact}\n          nameValue={name}\n          numberValue={number}\n          handleChangeNumber={this.inputHandlerContact}\n          addToContacts={this.addToContacts}\n          contactsId={this.contactsId}\n          isContact={this.isContact}\n        />\n\n        <h2>Contacts</h2>\n        <Filter\n          handleChangeNameFilter={this.inputHandlerContact}\n          contacts={contacts}\n          filter={filter}\n        />\n        <ContactList\n          contacts={contacts}\n          filterContacts={filteredContacts}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}